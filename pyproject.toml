[project]
name = "water-forecast-ai"
description = "Project under development focused on data analysis and water consumption forecasting using Artificial Intelligence models."
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "httpx>=0.27.0",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.16.0",
    "pip-tools>=7.4.1",
    "pre-commit>=4.2.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.11.13",
]

[tool.mypy]
files = ["water_forecast_ai"]         # Directory or files to be checked
allow_redefinition = false      # Disallows variable redefinition in the same scope
check_untyped_defs = true       # Checks functions without type annotations
ignore_missing_imports = true   # Ignores errors for third-party modules without type annotations
no_implicit_optional = true     # Requires explicit declaration of Optional
show_error_codes = true         # Displays error codes alongside error messages
warn_return_any = true          # Warns if functions return Any
warn_unused_ignores = true      # Warns about unnecessary `# type: ignore` comments
warn_unreachable = true         # Warns about unreachable code

[tool.pytest.ini_options]
addopts = "-ra --cov=water_forecast_ai --cov-report=term-missing"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
pythonpath = ["."]

[tool.ruff.lint]
extend-select = [
    "B",        # flake8-bugbear: find likely bugs and design problems.
    "C4",       # flake8-comprehensions: improves list, set, and dict comprehensions.
    "E",        # general errors: includes all general linting errors.
    "I",        # isort: enforces import sorting.
    "NPY",      # numpy: checks for NumPy-specific rules.
    "PL",       # pylint: suggests better coding practices.
    "UP",       # pyupgrade: modernizes Python code for newer versions.
]
ignore = [
    "B011",     # flake8-bugbear: allows 'assert False', useful for pytest testing.
    "E501",     # pycodestyle: allows long lines, useful for keeping docstrings readable.
    "PLR0913",  # pylint: allows functions with >5 arguments, useful in parametrized tests.
    "PLR2004",  # pylint: allows magic values in comparisons, useful in concise test asserts.
]

[tool.ruff.lint.isort]
known-first-party = ["water_forecast_ai"]

[tool.setuptools]
packages = ["water_forecast_ai"]
